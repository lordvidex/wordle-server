// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/jackc/pgx/v4"
	"github.com/lordvidex/wordle-wf/internal/adapters"
	"github.com/lordvidex/wordle-wf/internal/auth"
	"github.com/lordvidex/wordle-wf/internal/db/pg"
	"github.com/lordvidex/wordle-wf/internal/game"
	"github.com/lordvidex/wordle-wf/internal/websockets"
	"github.com/lordvidex/wordle-wf/internal/words"
	"time"
)

// Injectors from wire.go:

func injectAuth(db *pgx.Conn, tokenSecret string, tokenIAT time.Duration) auth.UseCases {
	repository := pg.NewUserRepository(db)
	tokenHelper := adapters.NewPASETOTokenHelper(tokenSecret, tokenIAT)
	passwordHelper := adapters.NewBcryptHelper()
	useCases := auth.NewUseCases(repository, tokenHelper, passwordHelper)
	return useCases
}

func injectGame(db *pgx.Conn, wrh words.RandomHandler, socket *websockets.GameSocket) game.UseCases {
	repository := pg.NewGameRepository(db)
	inviteIDGenerator := adapters.NewUniUriGenerator()
	awardSystem := adapters.NewAwardSystem()
	useCases := game.NewUseCases(repository, wrh, inviteIDGenerator, awardSystem, socket)
	return useCases
}

func injectWord() words.UseCases {
	stringGenerator := adapters.NewLocalStringGenerator()
	useCases := words.NewUseCases(stringGenerator)
	return useCases
}

// wire.go:

func injectRandomWordHandler(t words.UseCases) words.RandomHandler {
	return t.RandomWordHandler
}
