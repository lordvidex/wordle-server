// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: word.sql

package pg

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

type InsertWordsParams struct {
	PlayerGamesID uuid.NullUUID
	Word          string
	PlayedAt      time.Time
}

const playerWordsInGame = `-- name: PlayerWordsInGame :many
SELECT pgw.id, pgw.player_games_id, pgw.word, pgw.played_at from player_game_words pgw
INNER JOIN player_games pg ON pgw.player_games_id = pg.id
WHERE pg.player_id=$1 AND pg.game_id=$2
`

type PlayerWordsInGameParams struct {
	PlayerID uuid.NullUUID
	GameID   uuid.NullUUID
}

func (q *Queries) PlayerWordsInGame(ctx context.Context, arg PlayerWordsInGameParams) ([]*PlayerGameWord, error) {
	rows, err := q.db.Query(ctx, playerWordsInGame, arg.PlayerID, arg.GameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PlayerGameWord
	for rows.Next() {
		var i PlayerGameWord
		if err := rows.Scan(
			&i.ID,
			&i.PlayerGamesID,
			&i.Word,
			&i.PlayedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const wordsPlayedBy = `-- name: WordsPlayedBy :many
SELECT pgw.id, player_games_id, word, played_at, pg.id, player_id, game_id, user_game_name, points, position FROM player_game_words pgw 
INNER JOIN player_games pg ON pgw.player_games_id = pg.id 
WHERE pg.player_id = $1
`

type WordsPlayedByRow struct {
	ID            int64
	PlayerGamesID uuid.NullUUID
	Word          string
	PlayedAt      time.Time
	ID_2          uuid.UUID
	PlayerID      uuid.NullUUID
	GameID        uuid.NullUUID
	UserGameName  string
	Points        sql.NullInt32
	Position      sql.NullInt32
}

func (q *Queries) WordsPlayedBy(ctx context.Context, playerID uuid.NullUUID) ([]*WordsPlayedByRow, error) {
	rows, err := q.db.Query(ctx, wordsPlayedBy, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*WordsPlayedByRow
	for rows.Next() {
		var i WordsPlayedByRow
		if err := rows.Scan(
			&i.ID,
			&i.PlayerGamesID,
			&i.Word,
			&i.PlayedAt,
			&i.ID_2,
			&i.PlayerID,
			&i.GameID,
			&i.UserGameName,
			&i.Points,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
