// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: game.sql

package pg

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :exec

INSERT INTO game (id, invite_id, word, player_count, start_time) VALUES ($1, $2, $3, $4, $5) RETURNING id, invite_id, word, player_count, start_time, end_time
`

type CreateGameParams struct {
	ID          uuid.UUID
	InviteID    string
	Word        string
	PlayerCount int16
	StartTime   time.Time
}

//
// CREATE GAME
//
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.Exec(ctx, createGame,
		arg.ID,
		arg.InviteID,
		arg.Word,
		arg.PlayerCount,
		arg.StartTime,
	)
	return err
}

const createGameSettings = `-- name: CreateGameSettings :exec
INSERT INTO
    game_settings(
        game_id,
        word_length,
        trials,
        max_player_count,
        has_analytics,
        should_record_time,
        can_view_opponents_sessions
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING id, game_id, word_length, trials, max_player_count, has_analytics, should_record_time, can_view_opponents_sessions
`

type CreateGameSettingsParams struct {
	GameID                   uuid.NullUUID
	WordLength               sql.NullInt16
	Trials                   sql.NullInt16
	MaxPlayerCount           sql.NullInt16
	HasAnalytics             sql.NullBool
	ShouldRecordTime         sql.NullBool
	CanViewOpponentsSessions sql.NullBool
}

func (q *Queries) CreateGameSettings(ctx context.Context, arg CreateGameSettingsParams) error {
	_, err := q.db.Exec(ctx, createGameSettings,
		arg.GameID,
		arg.WordLength,
		arg.Trials,
		arg.MaxPlayerCount,
		arg.HasAnalytics,
		arg.ShouldRecordTime,
		arg.CanViewOpponentsSessions,
	)
	return err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM game WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const endGame = `-- name: EndGame :exec
UPDATE
    game
SET
    end_time = $1
WHERE
    game.id = $2
`

type EndGameParams struct {
	EndTime sql.NullTime
	ID      uuid.UUID
}

func (q *Queries) EndGame(ctx context.Context, arg EndGameParams) error {
	_, err := q.db.Exec(ctx, endGame, arg.EndTime, arg.ID)
	return err
}

const findById = `-- name: FindById :one

SELECT game.id, game.invite_id, game.word, game.player_count, game.start_time, game.end_time,
       game_settings.word_length,
       game_settings.trials,
       game_settings.max_player_count,
       game_settings.has_analytics,
       game_settings.should_record_time,
       game_settings.can_view_opponents_sessions
       FROM game
    INNER JOIN game_settings ON game_settings.game_id = game.id
WHERE game.id = $1 LIMIT 1
`

type FindByIdRow struct {
	ID                       uuid.UUID
	InviteID                 string
	Word                     string
	PlayerCount              int16
	StartTime                time.Time
	EndTime                  sql.NullTime
	WordLength               sql.NullInt16
	Trials                   sql.NullInt16
	MaxPlayerCount           sql.NullInt16
	HasAnalytics             sql.NullBool
	ShouldRecordTime         sql.NullBool
	CanViewOpponentsSessions sql.NullBool
}

//
// Find Game
//
func (q *Queries) FindById(ctx context.Context, id uuid.UUID) (*FindByIdRow, error) {
	row := q.db.QueryRow(ctx, findById, id)
	var i FindByIdRow
	err := row.Scan(
		&i.ID,
		&i.InviteID,
		&i.Word,
		&i.PlayerCount,
		&i.StartTime,
		&i.EndTime,
		&i.WordLength,
		&i.Trials,
		&i.MaxPlayerCount,
		&i.HasAnalytics,
		&i.ShouldRecordTime,
		&i.CanViewOpponentsSessions,
	)
	return &i, err
}

const updateGameResult = `-- name: UpdateGameResult :one
INSERT INTO player_games (player_id, game_id, user_game_name, points, position) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type UpdateGameResultParams struct {
	PlayerID     uuid.NullUUID
	GameID       uuid.NullUUID
	UserGameName string
	Points       sql.NullInt32
	Position     sql.NullInt32
}

func (q *Queries) UpdateGameResult(ctx context.Context, arg UpdateGameResultParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateGameResult,
		arg.PlayerID,
		arg.GameID,
		arg.UserGameName,
		arg.Points,
		arg.Position,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateGameSettings = `-- name: UpdateGameSettings :one

UPDATE
    game_settings
SET
    (
        word_length,
        trials,
        max_player_count,
        has_analytics,
        should_record_time,
        can_view_opponents_sessions
    ) = ($2, $3, $4, $5, $6, $7)
WHERE
    game_settings.game_id = $1 RETURNING id, game_id, word_length, trials, max_player_count, has_analytics, should_record_time, can_view_opponents_sessions
`

type UpdateGameSettingsParams struct {
	GameID                   uuid.NullUUID
	WordLength               sql.NullInt16
	Trials                   sql.NullInt16
	MaxPlayerCount           sql.NullInt16
	HasAnalytics             sql.NullBool
	ShouldRecordTime         sql.NullBool
	CanViewOpponentsSessions sql.NullBool
}

//
// UPDATE SETTINGS
//
func (q *Queries) UpdateGameSettings(ctx context.Context, arg UpdateGameSettingsParams) (*GameSetting, error) {
	row := q.db.QueryRow(ctx, updateGameSettings,
		arg.GameID,
		arg.WordLength,
		arg.Trials,
		arg.MaxPlayerCount,
		arg.HasAnalytics,
		arg.ShouldRecordTime,
		arg.CanViewOpponentsSessions,
	)
	var i GameSetting
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.WordLength,
		&i.Trials,
		&i.MaxPlayerCount,
		&i.HasAnalytics,
		&i.ShouldRecordTime,
		&i.CanViewOpponentsSessions,
	)
	return &i, err
}
