// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package pg

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password FROM wordlewf_user WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*WordlewfUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i WordlewfUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password FROM wordlewf_user WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (*WordlewfUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i WordlewfUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return &i, err
}

const getUserByName = `-- name: GetUserByName :many
SELECT id, name, email, password FROM wordlewf_user WHERE name ILIKE '%' || $1 || '%'
`

func (q *Queries) GetUserByName(ctx context.Context, dollar_1 sql.NullString) ([]*WordlewfUser, error) {
	rows, err := q.db.Query(ctx, getUserByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WordlewfUser{}
	for rows.Next() {
		var i WordlewfUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGames = `-- name: GetUserGames :many
SELECT game.id, game.invite_id, game.word_id, game.start_time, game.end_time, game_player.id, game_player.user_id, game_player.game_id, game_player.name, game_player.deleted from game
     INNER JOIN game_player ON game_player.game_id = game.id
     WHERE game_player.user_id = $1
`

type GetUserGamesRow struct {
	ID        uuid.UUID
	InviteID  string
	WordID    uuid.NullUUID
	StartTime sql.NullTime
	EndTime   sql.NullTime
	ID_2      uuid.UUID
	UserID    uuid.UUID
	GameID    uuid.UUID
	Name      string
	Deleted   sql.NullBool
}

func (q *Queries) GetUserGames(ctx context.Context, userID uuid.UUID) ([]*GetUserGamesRow, error) {
	rows, err := q.db.Query(ctx, getUserGames, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserGamesRow{}
	for rows.Next() {
		var i GetUserGamesRow
		if err := rows.Scan(
			&i.ID,
			&i.InviteID,
			&i.WordID,
			&i.StartTime,
			&i.EndTime,
			&i.ID_2,
			&i.UserID,
			&i.GameID,
			&i.Name,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
